THIS README IS NOT FINISHED YET

***************************************************************************************************************************************
OVERVIEW
--------

Milestone 1 is a program that uses the MSP430F5529 development board to receive, process, and transmit data via USB-pin or pin-to-pin.
This data is used to light up an RGB LED external to the development board at a specific color combination and brightness.
Additional data received (if any) can be transmitted via pin to another MSP430 device.
This functionality is based on how the fictional character, Will Byers from STRANGER THINGS, communicated with his mother while using
string lights.

First, the specifications are discussed. Second, the MSP430F5529 Design is explained. Third, the initialization functions are detailed.
Fourth, the Software-PWM interrupts are discussed. Fifth, the UART interrupts are explained. Finally, the external circuitry is
detailed.

***************************************************************************************************************************************
SPECIFICATIONS
--------------

This program is designed to take information in through USB or pin connection. The information originates from a software called
"Realterm." The long string of information is sent in byte increments. The 1st byte received indicates how many more bytes are in the
data package. The 2nd byte received indicates how bright to light up the red LED. The 3rd byte, the green LED; and the 4th byte, the
blue LED. Additional bytes received get transmitted with no alterations. Below is a tabular representation of the functionality:
 _______________________________________________________________________________________________
| Byte no. |                  Contents                  |                Example                |
|----------|--------------------------------------------|---------------------------------------|
|    0     | Number of bytes (N) not including this bit |            0x06 (6 bytes)             |
| 1 to N-1 |          RGB Colors for each node          | 0xFF (red), 0x00 (green), 0x7F (blue) |
|__________|____________________________________________|_______________________________________|

***************************************************************************************************************************************
MSP430F5529 DESIGN
------------------
 
In order to execute this program:
- The MSP430F5529 must be set up properly
- The PWM must occur through interrupts
- UART must be configured and enabled and occur through interrupts as well

Global Variables
- i     : unsigned char : tracks how many bytes left to process for USB-to-pin UART interaction
- j     : unsigned char : tracks how many bytes left to process for pin-to-pin UART interaction
- state : unsigned char : tracks how to process each byte, whether to read package size, RGB intensity, or to pass along the byte

Setup Functions
- void externalRGBLEDsetup() : configures the MSP430F5529 pins to interface with RGB LEDs external to the development board
- void timerA0Setup()        : configures the pins to interface with the timer A0 peripheral to implement the software-PWM
- void UARTsetup()           : sets up the UART interface

Interrupt Functions
- void TIMER0_A0()        : interrupt service routine for Timer A0 CCR0 : turns the LEDs ON during the PWM-cycle
- void TIMER0_A1_VECTOR() : interrupt service routine for Timer A0 CCR1 : turns the LEDs OFF during the PWM-cycle
- void USCI_A1_VECTOR()   : USB-to-pin UART interrupt service routine   : determines how to process data received via USB
- void USCI_A0_VECTOR()   : pin-to-pin UART interrupt service routine   : determines how to process data received via pin

***************************************************************************************************************************************
INITIALIZATIONS
---------------

externalRGBLEDsetup()
- P1SEL is not explicitly initialized, but it is defaultly configured as GPIO 
- Bits 2, 3, and 4 of P1DIR are set high, making P1.2, P1.3, and P1.4 outputs. (these pins are used to
- P1.2 corresponds with the red LED, P1.3 with the green LED, and P1.4 the blue LED.
- P2OUT is not explicitly initialized, but is set to 0 by default

timerA0Setup()
- Interrupts are enabled on TA0CCR0, TA0CCR1, TA0CCR2, and TA0CCR3
- TA0CCRn for n between 0-4 represent the PWM-period, Red LED duty cycle, Green duty cycle, and Blue duty cycle respectively
- Timer A0 is configured using SM clock, Up-mode, and no internal divider
- TA0CCR0 is preset to 255, which the rest are preset to 0

UARTsetup()
- Bits 3 and 4 of P3SEL must be set high because P3.3 and P3.4 are for pin-to-pin UART transmit/receive
- Bits 4 and 5 of P4SEL must be set high because P4.4 and P4.5 are for USB-to-pin UART transmit/receive
- SM clock with 9600 Baud rate, and enable USCI_A0 and USCI_A1 interrupts

After initialization, the processor enables global interrupts with the following code: _BIS_SR(GIE);
Then, it waits in a while(1) loop.

***************************************************************************************************************************************
SOFTWARE-PWM INTERRUPTS
-----------------------

TIMER0_A0
- outside the main function, an interrupt vector is defined with the following code: #pragma vector=TIMER0_A0_VECTOR
- an interrupt function which turns the LEDs on is defined with the following code: __interrupt void TIMER0_A0(void)
- when this interrupt triggers, all external LEDs should turn on except of TA0CCRx equals 0
- to implement this functionality, an three separate if-statements check to make sure each TA0CCRx register != 0 before turning ON

TIMER0_A1
- outside the main function, an interrupt vector is defined with the following code: #pragma vector=TIMER0_A1_VECTOR
- an interrupt function which turns the LEDs on is defined with the following code: __interrupt void TIMER0_A1(void)
- all TA0CCRx interrupts (for x = 2,3,4) trigger this vector
- when this interrupt triggers, a switch statement is needed to determine the origin of the interrupt
- the LED routed to the corresponding TA0CCRx is set low

***************************************************************************************************************************************
UART INTERRUPTS
---------------

USCI_A1_interrupt
- this interrupt triggers when the MSP430F5529 receives data through USB connection
- a switch statement based on the global variable, "state" is needed to determine how to process the incoming data
- case 1 : the number of bytes in the incoming package
- case 2 : the intensity of the red LED
- case 3 : the intensity of the green LED
- case 4 : the intensity of the blue LED
- case 5 : data is passed along without any processing
- global variable i is set in each case

USCI_A0_interrupt
- this interrupt triggers when the MSP430F5529 receives data through pin-to-pin connection
- a switch statement based on the global variable, "state" is needed to determine how to process the incoming data
- each case in USCI_A1_interrupt has almost identical functionality to USCI_A1_interrupt
- global variable j is set in each case


***************************************************************************************************************************************
EXTERNAL CIRCUITRY
------------------

   MSP430F5529 Pinout for Pins Used                List of Parts for 
 _____________________________________             ________________________________________________
| Pin No. | Port | Description        |           | Label   |   PN    | Description  | Connections |
|---------|------|--------------------|           |---------|---------|--------------|
| 1       | NA   | Vcc                |           |   R1    |    -    |   300 Ohm    |        
| 2       | P1.0 | Feeds to Green LED |           |   R2    |    -    |   195 Ohm    |
| 14      | P1.6 | Feeds to Red LED   |           |   R3    |    -    |   150 Ohm    |
| 16      | ~RST | Feeds to Button    |           |  R4-6   |    -    |   100 kOhm   |
| 20      | NA   | Vss                |           |   Q1    | 2N7000  |    N-MOS     |
|_________|______|____________________|           |   Q2    | 2N7000  |    N-MOS     |
                                                  |   Q3    | 2N7000  |    N-MOS     |
                                                  | RGBLED  |    -    |Common-Cathode|
                                                  |_________|_________|______________|_____________

Circuit Design
- the follwing code must be added to disable GPIO power-on default Hi-Z mode to use the ports: PM5CTL0 &= ~LOCKLPM5;
- P1.0 is the pin routed to the LED (LED1)
- Bit 0 of P1SEL, P1DIR, and P1OUT are initialized accordingly
- TBCCL0 is set to CCIE, enabling an interrupt when the value in TB0R equals the value stored in TBCCR0
- after initialization, the processor goes to into low-power mode with the following code: _BIS_SR(LPM1_bits + GIE);
- outside the main function, an interrupt vector is defined with the following code: #pragma vector=TIMER0_B0_VECTOR
- an interrupt function, which toggles P1.0 (KED1) is defined with the following code: __interrupt void TIMER0_B0(void)

***************************************************************************************************************************************
